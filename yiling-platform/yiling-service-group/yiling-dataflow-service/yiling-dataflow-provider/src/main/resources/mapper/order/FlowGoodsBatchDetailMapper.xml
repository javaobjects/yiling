<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yiling.dataflow.order.dao.FlowGoodsBatchDetailMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.yiling.dataflow.order.entity.FlowGoodsBatchDetailDO">
        <result column="id" property="id"/>
        <result column="eid" property="eid"/>
        <result column="ename" property="ename"/>
        <result column="crm_enterprise_id" property="crmEnterpriseId" />
        <result column="supplier_level" property="supplierLevel" />
        <result column="gb_id_no" property="gbIdNo"/>
        <result column="in_sn" property="inSn"/>
        <result column="gb_detail_time" property="gbDetailTime"/>
        <result column="gb_detail_month" property="gbDetailMonth"/>
        <result column="gb_time" property="gbTime"/>
        <result column="gb_name" property="gbName"/>
        <result column="gb_specifications" property="gbSpecifications"/>
        <result column="specification_id" property="specificationId"/>
        <result column="gb_batch_no" property="gbBatchNo"/>
        <result column="gb_number" property="gbNumber"/>
        <result column="total_number" property="totalNumber"/>
        <result column="gb_unit" property="gbUnit"/>
        <result column="gb_produce_time" property="gbProduceTime"/>
        <result column="gb_end_time" property="gbEndTime"/>
        <result column="gb_manufacturer" property="gbManufacturer"/>
        <result column="gb_license" property="gbLicense"/>
        <result column="gb_source" property="gbSource"/>
        <result column="province_code" property="provinceCode"/>
        <result column="province_name" property="provinceName"/>
        <result column="city_code" property="cityCode"/>
        <result column="city_name" property="cityName"/>
        <result column="region_code" property="regionCode"/>
        <result column="region_name" property="regionName"/>
        <result column="crm_code" property="crmCode"/>
        <result column="crm_goods_code" property="crmGoodsCode"/>
        <result column="goods_possible_error" property="goodsPossibleError"/>
        <result column="collect_time" property="collectTime"/>
        <result column="del_flag" property="delFlag"/>
        <result column="create_user" property="createUser"/>
        <result column="create_time" property="createTime"/>
        <result column="update_user" property="updateUser"/>
        <result column="update_time" property="updateTime"/>
        <result column="remark" property="remark"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id,
        eid, ename, crm_enterprise_id, supplier_level, gb_id_no, in_sn, gb_detail_time, gb_detail_month, gb_time, gb_name, gb_specifications, specification_id,
        gb_batch_no, gb_number, total_number, gb_unit, gb_produce_time, gb_end_time, gb_manufacturer, gb_license, gb_source,
        province_code, province_name, city_code, city_name, region_code, region_name,
        crm_code, crm_goods_code, goods_possible_error,collect_time,
        del_flag, create_user, create_time, update_user, update_time, remark

    </sql>

    <sql id="Base_Table_Name">
        `flow_goods_batch_detail`
    </sql>

    <select id="page" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <choose>
            <when test="request.timeType == 0">
                `flow_goods_batch_detail`
            </when>
            <when test="request.timeType == 1">
                `flow_goods_batch_detail_${request.selectYear}`
            </when>
            <otherwise>
                `flow_goods_batch_detail`
            </otherwise>
        </choose>
        WHERE del_flag = 0
        <if test="request.startTime != null">
            AND gb_detail_time <![CDATA[ >= ]]> #{request.startTime}
        </if>
        <if test="request.endTime != null">
            AND gb_detail_time <![CDATA[ <= ]]> #{request.endTime}
        </if>
        <if test="request.gbDetailMonth != null and request.gbDetailMonth != ''">
            AND gb_detail_month = #{request.gbDetailMonth}
        </if>
        <if test="request.specificationIdFlag != null and request.specificationIdFlag == 0">
            AND specification_id = 0
        </if>
        <if test="request.specificationIdFlag != null and request.specificationIdFlag == 1">
            AND specification_id != 0
        </if>
        <if test="request.goodsCrmCodeFlag != null and request.goodsCrmCodeFlag == 0">
            AND crm_goods_code = 0
        </if>
        <if test="request.goodsCrmCodeFlag != null and request.goodsCrmCodeFlag == 1">
            AND crm_goods_code > 0
        </if>
        <if test="request.eidList != null and request.eidList.size() > 0">
            AND eid in
            <foreach item="item" index="index" collection="request.eidList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="request.eid != null">
            AND eid=#{request.eid, jdbcType=BIGINT}
        </if>
        <if test="request.goodsName != null and request.goodsName != ''">
            AND gb_name like concat('%',#{request.goodsName},'%')
        </if>
        <if test="request.specifications != null and request.specifications != ''">
            AND gb_specifications like concat('%',#{request.specifications},'%')
        </if>
    </select>

    <select id="getPageByGbMonth" resultMap="BaseResultMap">
            SELECT
            <include refid="Base_Column_List"/>
            FROM `flow_goods_batch_detail`
            WHERE del_flag = 0
            <if test="request.gbDetailMonth != null and request.gbDetailMonth != ''">
                AND gb_detail_month = #{request.gbDetailMonth}
            </if>
            <if test="request.gbName != null and request.gbName != ''">
                AND gb_name = #{request.gbName}
            </if>
            <if test="request.gbSpecifications != null and request.gbSpecifications != ''">
                AND gb_specifications = #{request.gbSpecifications}
            </if>
            <if test="request.crmGoodsCode != null">
                AND crm_goods_code = #{request.crmGoodsCode}
            </if>
        </select>

    <delete id="deleteFlowGoodsBatchDetailByEidAndDate">
        delete from flow_goods_batch_detail where
        eid=#{request.eid,jdbcType=BIGINT}
        and gb_detail_time =  #{request.dateTime}
    </delete>


    <update id="createBackupTable">
        CREATE TABLE ${backupTableName} LIKE ${tableName}
    </update>

    <update id="addColumn">
        ALTER TABLE ${backupTableName} ADD COLUMN `backup_time` datetime(0) NOT NULL DEFAULT '1970-01-01 00:00:00' COMMENT '备份时间' AFTER `remark`
    </update>

    <insert id="initBackupData">
        INSERT INTO ${backupTableName} (<include refid="Base_Column_List"/>)
        SELECT <include refid="Base_Column_List"/> FROM ${tableName}
        WHERE del_flag = 0 AND gb_detail_time <![CDATA[ <= ]]> #{gbDetailTimeEnd}
    </insert>

    <insert id="insertBackupDataBySoTime">
        INSERT INTO ${backupTableName} (<include refid="Base_Column_List"/>)
        SELECT <include refid="Base_Column_List"/> FROM ${tableName}
        WHERE del_flag = 0 AND gb_detail_time <![CDATA[ >= ]]> #{gbDetailTimeStart} AND gb_detail_time <![CDATA[ <= ]]> #{gbDetailTimeEnd}
    </insert>

    <select id="getBackupTableIdListByGbDetailTime" resultType="java.lang.Long">
        SELECT id
        FROM ${backupTableName}
        WHERE gb_detail_time <![CDATA[ >= ]]> #{gbDetailTimeStart} AND gb_detail_time <![CDATA[ <= ]]> #{gbDetailTimeEnd}
    </select>

    <select id="findGoodsDateQuantityByEidAndDateTime" resultType="com.yiling.dataflow.statistics.bo.GoodsSpecQuantityBO">
        select specification_id specificationId,
               IFNULL(SUM(gb_number), 0) quantity
            from flow_goods_batch_detail
            <where>
                and eid = #{eid} and DATE_FORMAT(gb_detail_time, '%Y-%m-%d')  = #{dateTime}
                and specification_id in
                <foreach collection="specificationIdList" open="(" close=")" item="specificationId" separator=",">
                    #{specificationId}
                </foreach>
            </where>
        group by specification_id
    </select>

    <select id="getEndMonthCantMatchGoodsQuantityList" resultMap="BaseResultMap">
        select eid, sum(gb_number) gb_number from flow_goods_batch_detail
        <where>
            and specification_id = 0
            and DATE_FORMAT(gb_detail_time, '%Y-%m-%d')  = #{dateTime}
            and eid in
            <foreach collection="eidList" item="eid" open="(" close=")" separator=",">
                #{eid}
            </foreach>
        </where>
        group by eid

    </select>

    <select id="getSpecificationIdCount" resultType="java.lang.Integer">
        select count(0) from flow_goods_batch_detail where  del_flag = 0 and specification_id = #{specificationId}
    </select>

    <delete id="deleteByGbDetailTime">
        DELETE FROM flow_goods_batch_detail
        WHERE gb_detail_time <![CDATA[ >= ]]> #{gbDetailTimeStart} AND gb_detail_time <![CDATA[ <= ]]> #{gbDetailTimeEnd}
    </delete>

    <delete id="deleteByDelFlagAndEid">
        DELETE FROM flow_goods_batch_detail
        WHERE del_flag = 1 AND eid = #{eid}
    </delete>

    <delete id="deleteByGbDetailTimeEnd">
        DELETE FROM flow_goods_batch_detail
        WHERE gb_detail_time <![CDATA[ <= ]]> #{gbDetailTimeEnd}
    </delete>

    <select id="getOneByEidAndGbDetailMonth" resultType="java.lang.Long">
        SELECT COUNT(1) AS count
        FROM ${backupTableName}
        WHERE del_flag = 0 AND eid = #{eid} AND gb_detail_month <![CDATA[ = ]]> #{gbDetailMonth}
        LIMIT 1
    </select>

    <delete id="deleteByEidAndGbDetailMonth">
        DELETE FROM ${backupTableName}
        WHERE eid = #{eid} AND gb_detail_month <![CDATA[ = ]]> #{gbDetailMonth}
    </delete>

    <insert id="insertBackupDataByEidAndGbDetailMonth">
        INSERT INTO ${backupTableName} (<include refid="Base_Column_List"/>, backup_time)
        (SELECT <include refid="Base_Column_List"/>, NOW() FROM ${tableName}
        WHERE eid = #{eid} AND gb_detail_month <![CDATA[ = ]]> #{gbDetailMonth})
    </insert>

    <select id="getMonthListByEidAndGbDetailMonth" resultType="com.yiling.dataflow.order.bo.FlowGoodsBatchDetailMonthBO">
        SELECT eid, gb_detail_month AS gbDetailMonth
        FROM flow_goods_batch_detail
        WHERE eid = #{eid} AND (gb_detail_month is not null AND gb_detail_month != '')
        AND gb_detail_month <![CDATA[ <= ]]> #{gbDetailMonth}
        GROUP BY eid, gb_detail_month
        ORDER BY gb_detail_month DESC
    </select>

    <select id="pageBackup" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM ${request.tableName}
        WHERE del_flag = 0
        <if test="request.startTime != null">
            AND gb_detail_time <![CDATA[ >= ]]> #{request.startTime}
        </if>
        <if test="request.endTime != null">
            AND gb_detail_time <![CDATA[ <= ]]> #{request.endTime}
        </if>
        <if test="request.gbDetailMonth != null and request.gbDetailMonth != ''">
            AND gb_detail_month = #{request.gbDetailMonth}
        </if>
        <if test="request.specificationIdFlag != null and request.specificationIdFlag == 0">
            AND specification_id = 0
        </if>
        <if test="request.specificationIdFlag != null and request.specificationIdFlag == 1">
            AND specification_id != 0
        </if>
        <if test="request.goodsCrmCodeFlag != null and request.goodsCrmCodeFlag == 0">
            AND crm_goods_code = 0
        </if>
        <if test="request.goodsCrmCodeFlag != null and request.goodsCrmCodeFlag == 1">
            AND crm_goods_code > 0
        </if>
        <if test="request.eidList != null and request.eidList.size() > 0">
            AND eid in
            <foreach item="item" index="index" collection="request.eidList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <delete id="deleteById">
        DELETE FROM ${backupTableName}
        WHERE id IN
        <foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <insert id="saveBatchBackup" parameterType="java.util.List">
        INSERT INTO
        ${backupTableName}
        ( <include refid="Base_Column_List"/>, backup_time)
        VALUES
        <foreach collection="list" item="entity" index="index" separator=",">
            (
            #{entity.id},
            #{entity.eid},
            #{entity.ename},
            #{entity.crmEnterpriseId},
            #{entity.gbIdNo},
            #{entity.inSn},
            #{entity.gbDetailTime},
            #{entity.gbDetailMonth},
            #{entity.gbTime},
            #{entity.gbName},
            #{entity.gbSpecifications},
            #{entity.specificationId},
            #{entity.gbBatchNo},
            #{entity.gbNumber},
            #{entity.totalNumber},
            #{entity.gbUnit},
            #{entity.gbProduceTime},
            #{entity.gbEndTime},
            #{entity.gbManufacturer},
            #{entity.gbLicense},
            #{entity.gbSource},
            #{entity.provinceCode},
            #{entity.provinceName},
            #{entity.cityCode},
            #{entity.cityName},
            #{entity.regionCode},
            #{entity.regionName},
            #{entity.crmCode},
            #{entity.crmGoodsCode},
            #{entity.goodsPossibleError},
            #{entity.collectTime},
            #{entity.delFlag},
            #{entity.createUser},
            #{entity.createTime},
            #{entity.updateUser},
            #{entity.updateTime},
            #{entity.remark},
            NOW()
            )
        </foreach>
    </insert>

    <select id="selectFlowGoodsBatchDetailCount" resultType="int">
        SELECT COUNT(1)
        FROM
        <include refid="Base_Table_Name"/>
        where
        eid = #{request.eid}
        AND update_time <![CDATA[ >= ]]> #{request.startUpdateTime}
        AND update_time <![CDATA[ <= ]]> #{request.endUpdateTime}
    </select>

    <select id="selectFlowGoodsBatchDetailPage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM
        <include refid="Base_Table_Name"/>
        where
        eid = #{request.eid}
        AND update_time <![CDATA[ >= ]]> #{request.startUpdateTime}
        AND update_time <![CDATA[ <= ]]> #{request.endUpdateTime}
    </select>

    <select id="getFlowGoodsBatchStatistics" resultType="com.yiling.dataflow.order.bo.FlowStatisticsBO">
        SELECT
        s.crm_enterprise_id as crmEnterpriseId,
        DATE_FORMAT(s.gb_detail_time, '%Y-%m-%d') as dateTime
        FROM
        flow_goods_batch_detail s
        WHERE
        s.del_flag = 0
        AND gb_detail_time <![CDATA[  >= ]]> date_add(DATE_FORMAT(now(), '%Y-%m-%d'), interval -30 day)
        and gb_detail_time  <![CDATA[ < ]]> date_add(DATE_FORMAT(now(), '%Y-%m-%d'), interval 0 day)
        and crm_enterprise_id IN
        <foreach item="item" index="index" collection="request.crmEnterpriseIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY
        crm_enterprise_id,
        DATE_FORMAT(s.gb_detail_time, '%Y-%m-%d')
    </select>

</mapper>
